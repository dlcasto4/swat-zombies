
"use strict";

(() => {
    const config = window.debloatConfig || {};
    const isDebug = true;
    let delayedEvents = [];
    let jsScripts = [];
    let cssLinks = [];
    let isDocumentInteractive = false;
    let isDocumentComplete = false;
    let isJsDeferred = false;
    let isCssDeferred = false;

    const defaultListeners = {
        HTMLDocument: document.addEventListener.bind(document),
        Window: window.addEventListener.bind(window),
    };

    function initialize() {
        loadJsScripts();
        loadCssLinks();
    }

    function loadJsScripts(isImmediate = false) {
        jsScripts = [...document.querySelectorAll("script[data-debloat-delay]")];
        if (!jsScripts.length) return;

        if (!isJsDeferred) {
            isJsDeferred = true;
            addDelayedEventListeners();
            triggerDelayedLoad("js", isImmediate);
        }
    }

    function loadCssLinks(isImmediate = false) {
        cssLinks = [...document.querySelectorAll("link[data-debloat-delay]")];
        if (cssLinks.length) {
            triggerDelayedLoad("css", isImmediate);
        }
    }

    function addDelayedEventListeners() {
        ["DOMContentLoaded", "load", "readystatechange", "pageshow"].forEach(event => {
            addEventListenerWithHandler(event, document);
            addEventListenerWithHandler(event, window);
        });
    }

    function addEventListenerWithHandler(event, target) {
        target.addEventListener(event, evt => (delayedEvents[event] = evt));
    }

    function triggerDelayedLoad(type, isImmediate) {
        const delayType = isImmediate ? "immediate" : (config[`${type}DelayType`] || "onload");
        const loadFunction = type === "js" ? executeJsScripts : executeCssLinks;

        if (delayType === "onload") {
            deferUntilPageLoad(() => loadFunction(isImmediate));
        } else if (delayType === "interact") {
            deferUntilUserInteraction(loadFunction);
        } else if (delayType === "custom-delay") {
            deferWithCustomDelay(loadFunction);
        }
    }

    function deferUntilPageLoad(callback) {
        if (document.readyState === "complete") {
            callback();
        } else {
            window.addEventListener("load", callback);
        }
    }

    function deferUntilUserInteraction(callback) {
        let hasInteracted = false;
        const interactionEvents = ["mousemove", "mousedown", "keydown", "touchstart", "wheel"];

        const triggerCallback = () => {
            if (!hasInteracted) {
                hasInteracted = true;
                callback();
            }
        };

        interactionEvents.forEach(event => {
            document.addEventListener(event, triggerCallback, { passive: true, once: true });
        });

        if (config.jsDelayMax) {
            setTimeout(triggerCallback, 1000 * config.jsDelayMax);
        }
    }

    function deferWithCustomDelay(callback) {
        deferUntilPageLoad(() => {
            setTimeout(callback, 1000 * parseInt(document.querySelector("[data-custom-delay]").dataset.customDelay));
        });
    }

    function executeCssLinks() {
        cssLinks.forEach(link => loadResource(link, "href"));
    }

    function executeJsScripts(isImmediate = false) {
        if (!isImmediate) {
            isDocumentInteractive = true;
            overrideDocumentReadyState();
        }

        jsScripts.forEach(script => loadResource(script, "src"));
        completeDeferredLoading();
    }

    function loadResource(resource, attribute) {
        const src = resource.dataset[attribute];
        if (!src) return;

        const element = document.createElement(resource.tagName.toLowerCase());
        element[attribute] = src;

        if (resource.crossOrigin) {
            element.crossOrigin = resource.crossOrigin;
        }

        resource.parentNode.replaceChild(element, resource);
    }

    function overrideDocumentReadyState() {
        let readyState = "loading";
        Object.defineProperty(document, "readyState", {
            configurable: true,
            get() { return readyState; },
            set(value) { readyState = value; },
        });
    }

    function completeDeferredLoading() {
        if (!isDocumentComplete) {
            isDocumentComplete = true;

            document.readyState = "interactive";
            delayedEvents.forEach(evt => evt.cb(evt.event, ...evt.args));

            document.readyState = "complete";
            setTimeout(() => {
                delayedEvents.forEach(evt => evt.cb(evt.event, ...evt.args));
            }, 2);
        }
    }

    document.addEventListener("debloat-load-css", () => loadCssLinks(true));
    document.addEventListener("debloat-load-js", () => loadJsScripts(true));

    initialize();
})();
